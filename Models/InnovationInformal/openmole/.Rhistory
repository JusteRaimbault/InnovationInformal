# source: addTransportationLayer in CS_HOME/CityNetwork/Models/TransportationNetwork/NetworkAnalysis/network.R
source(paste0(Sys.getenv('CS_HOME'),"/CityNetwork/Models/TransportationNetwork/NetworkAnalysis/network.R"))
nw = addTransportationLayer(link_layer = roads$osm_lines)
roads$osm_lines
# source: addTransportationLayer in CS_HOME/CityNetwork/Models/TransportationNetwork/NetworkAnalysis/network.R
source(paste0(Sys.getenv('CS_HOME'),"/CityNetwork/Models/TransportationNetwork/NetworkAnalysis/network.R"))
nw = addTransportationLayer(link_layer = roads$osm_lines)
as.character(roads$osm_lines)
nw = addTransportationLayer(link_layer = roads$osm_lines)
# source: addTransportationLayer in CS_HOME/CityNetwork/Models/TransportationNetwork/NetworkAnalysis/network.R
source(paste0(Sys.getenv('CS_HOME'),"/CityNetwork/Models/TransportationNetwork/NetworkAnalysis/network.R"))
nw = addTransportationLayer(link_layer = roads$osm_lines)
warnings()
nw
vertexes = data.frame()
g=empty_graph(0)$fun(0)
stations_layer=NULL
link_layer=roads$osm_lines
#'
#' @name addTransportationLayer
#' @description Construct tarnsportation graph by adding layers successively
#'
#' @param
#'
addTransportationLayer<-function(stations_layer=NULL,
link_layer,
g=empty_graph(0)$fun(0),
speed=1,
snap=100,
e_attr_names=NULL,
reprojection=NULL
){
show(paste0('Adding transportation network : stations = ',stations_layer,' ; links = ',link_layer))
# construct vertex set
vertexes = data.frame()
if(length(V(g))>0){
vertexes = data.frame(id=V(g)$name,x=V(g)$x,y=V(g)$y,station=V(g)$station)
vertexes$id=as.numeric(as.character(vertexes$id))
currentvid = vertexes$id[nrow(vertexes)] + 1
}
if(!is.null(stations_layer)){
if(is.character(stations_layer)){
spath = strsplit(strsplit(stations_layer,'.shp')[[1]][1],'/')[[1]]
stations <- readOGR(paste(spath[1:(length(spath)-1)],collapse="/"),spath[length(spath)])
}else{stations <- stations_layer}
if(!is.null(reprojection)){
stations <- spTransform(stations, reprojection)
}
if(length(V(g))>0){
coords=stations@coords
for(i in 1:length(stations)){
statdist = apply(vertexes[,c("x","y")] - matrix(rep(coords[i,],nrow(vertexes)),ncol=2,byrow=TRUE),1,function(r){sqrt(r[1]^2+r[2]^2)})
# create only if does not exist
#show(min(statdist))
if(statdist[statdist==min(statdist)]>snap){
vertexes=rbind(vertexes,c(id=currentvid,x=coords[i,1],y=coords[i,2],station=TRUE))
currentvid=currentvid+1
}
}
}else{
vertexes=rbind(vertexes,data.frame(id=(nrow(vertexes)+1):(nrow(vertexes)+length(stations)),x=stations@coords[,1],y=stations@coords[,2],station=rep(TRUE,length(stations))))
vertexes$id=as.numeric(as.character(vertexes$id))
}
}
# links
if(is.character(link_layer)){
lpath = strsplit(strsplit(link_layer,'.shp')[[1]][1],'/')[[1]]
links <- readOGR(paste(lpath[1:(length(lpath)-1)],collapse="/"),lpath[length(lpath)])
}else{links <- link_layer}
if(!is.null(reprojection)){
links <- spTransform(links, reprojection)
}
edges = data.frame()
#show(g)
if(length(E(g))>0){
edges = data.frame(from=tail_of(g,E(g))$name,to=head_of(g,E(g))$name,speed=E(g)$speed,length=E(g)$length)
for(attrname in e_attr_names){edges=cbind(edges,get.edge.attribute(g,attrname));colnames(edges)[ncol(edges)]=attrname}
}
currentvid = ifelse(nrow(vertexes)>0,as.numeric(as.character(vertexes$id))[nrow(vertexes)] + 1,1)
edges$from=as.character(edges$from);edges$to=as.character(edges$to)
# convert shitty factor types
for(j in 1:ncol(links@data)){links@data[,j]=as.numeric(as.character(links@data[,j]))}
for(l in 1:length(links)){
#show(l)
#currentAdditionalAttrs=as.numeric(as.character(links@data[l,e_attr_names]))
currentAdditionalAttrs=links@data[l,e_attr_names]
#show(currentAdditionalAttrs)
for(i in 1:length(links@lines[[l]]@Lines)){
coords = links@lines[[l]]@Lines[[i]]@coords
vids = c()
#mincoords=apply(stations@coords,1,function(r){l=links@lines[[l]]@Lines[[i]]@coords;return(min(apply(abs(l-matrix(data=rep(r,nrow(l)),ncol=2,byrow = TRUE)),1,function(r){sqrt(r[1]^2+r[2]^2)})))})
for(k in 1:nrow(coords)){
if(nrow(vertexes)>0){
statdist = apply(vertexes[,c("x","y")] - matrix(rep(coords[k,],nrow(vertexes)),ncol=2,byrow=TRUE),1,function(r){sqrt(r[1]^2+r[2]^2)})
}else{statdist=c(2*snap)}
if(statdist[statdist==min(statdist)]<snap){
vids=append(vids,vertexes$id[statdist==min(statdist)])
#show(paste0('existing : ',vids))
}else{
# else create new vertex
vids=append(vids,currentvid)
#show(paste0('new : ',vids))
vertexes=rbind(vertexes,c(id=currentvid,x=coords[k,1],y=coords[k,2],station=FALSE))
names(vertexes)<-c("id","x","y","station")
currentvid=currentvid+1
}
#show(vertexes)
}
# add edges
for(k in 2:nrow(coords)){
addedge=c(from=vids[k-1],
to=vids[k],
speed=speed,
length=sqrt((coords[k-1,1]-coords[k,1])^2+(coords[k-1,2]-coords[k,2])^2),
currentAdditionalAttrs
)
#show(addedge)
edges=rbind(edges,addedge)
}
}
}
#show(edges)
names(edges)<-c("from","to","speed","length",e_attr_names)
comblist=list(speed="mean",length="sum")
for(attrname in e_attr_names){comblist[[attrname]]="min"}
res = simplify(graph_from_data_frame(edges,directed=FALSE,vertices = vertexes),edge.attr.comb = comblist)
g = induced_subgraph(res,which(degree(res)>0))
if(is.null(stations_layer)){
V(g)$station = rep(TRUE,vcount(g))
}
return(g)
}
speed=1
snap=100
e_attr_names=NULL
reprojection=NULL
if (is.character(stations_layer)&&is.character(link_layer)){
show(paste0('Adding transportation network : stations = ',stations_layer,' ; links = ',link_layer))
}else {show('Adding transportation network layer')}
# construct vertex set
vertexes = data.frame()
if(length(V(g))>0){
vertexes = data.frame(id=V(g)$name,x=V(g)$x,y=V(g)$y,station=V(g)$station)
vertexes$id=as.numeric(as.character(vertexes$id))
currentvid = vertexes$id[nrow(vertexes)] + 1
}
if(!is.null(stations_layer)){
if(is.character(stations_layer)){
spath = strsplit(strsplit(stations_layer,'.shp')[[1]][1],'/')[[1]]
stations <- readOGR(paste(spath[1:(length(spath)-1)],collapse="/"),spath[length(spath)])
}else{stations <- stations_layer}
if(!is.null(reprojection)){
stations <- spTransform(stations, reprojection)
}
if(length(V(g))>0){
coords=stations@coords
for(i in 1:length(stations)){
statdist = apply(vertexes[,c("x","y")] - matrix(rep(coords[i,],nrow(vertexes)),ncol=2,byrow=TRUE),1,function(r){sqrt(r[1]^2+r[2]^2)})
# create only if does not exist
#show(min(statdist))
if(statdist[statdist==min(statdist)]>snap){
vertexes=rbind(vertexes,c(id=currentvid,x=coords[i,1],y=coords[i,2],station=TRUE))
currentvid=currentvid+1
}
}
}else{
vertexes=rbind(vertexes,data.frame(id=(nrow(vertexes)+1):(nrow(vertexes)+length(stations)),x=stations@coords[,1],y=stations@coords[,2],station=rep(TRUE,length(stations))))
vertexes$id=as.numeric(as.character(vertexes$id))
}
}
# links
if(is.character(link_layer)){
lpath = strsplit(strsplit(link_layer,'.shp')[[1]][1],'/')[[1]]
links <- readOGR(paste(lpath[1:(length(lpath)-1)],collapse="/"),lpath[length(lpath)])
}else{links <- link_layer}
if(!is.null(reprojection)){
links <- spTransform(links, reprojection)
}
edges = data.frame()
#show(g)
if(length(E(g))>0){
edges = data.frame(from=tail_of(g,E(g))$name,to=head_of(g,E(g))$name,speed=E(g)$speed,length=E(g)$length)
for(attrname in e_attr_names){edges=cbind(edges,get.edge.attribute(g,attrname));colnames(edges)[ncol(edges)]=attrname}
}
currentvid = ifelse(nrow(vertexes)>0,as.numeric(as.character(vertexes$id))[nrow(vertexes)] + 1,1)
currentvid
edges$from=as.character(edges$from);edges$to=as.character(edges$to)
edges
links@data
# convert shitty factor types
for(j in 1:ncol(links@data)){links@data[,j]=as.numeric(as.character(links@data[,j]))}
warnings()
links@data$maxspeed
for(l in 1:length(links)){
#show(l)
#currentAdditionalAttrs=as.numeric(as.character(links@data[l,e_attr_names]))
currentAdditionalAttrs=links@data[l,e_attr_names]
#show(currentAdditionalAttrs)
for(i in 1:length(links@lines[[l]]@Lines)){
coords = links@lines[[l]]@Lines[[i]]@coords
vids = c()
#mincoords=apply(stations@coords,1,function(r){l=links@lines[[l]]@Lines[[i]]@coords;return(min(apply(abs(l-matrix(data=rep(r,nrow(l)),ncol=2,byrow = TRUE)),1,function(r){sqrt(r[1]^2+r[2]^2)})))})
for(k in 1:nrow(coords)){
if(nrow(vertexes)>0){
statdist = apply(vertexes[,c("x","y")] - matrix(rep(coords[k,],nrow(vertexes)),ncol=2,byrow=TRUE),1,function(r){sqrt(r[1]^2+r[2]^2)})
}else{statdist=c(2*snap)}
if(statdist[statdist==min(statdist)]<snap){
vids=append(vids,vertexes$id[statdist==min(statdist)])
#show(paste0('existing : ',vids))
}else{
# else create new vertex
vids=append(vids,currentvid)
#show(paste0('new : ',vids))
vertexes=rbind(vertexes,c(id=currentvid,x=coords[k,1],y=coords[k,2],station=FALSE))
names(vertexes)<-c("id","x","y","station")
currentvid=currentvid+1
}
#show(vertexes)
}
# add edges
for(k in 2:nrow(coords)){
addedge=c(from=vids[k-1],
to=vids[k],
speed=speed,
length=sqrt((coords[k-1,1]-coords[k,1])^2+(coords[k-1,2]-coords[k,2])^2),
currentAdditionalAttrs
)
#show(addedge)
edges=rbind(edges,addedge)
}
}
}
edges
e_attr_names = c("maxspeed")
edges = data.frame()
edges$from=as.character(edges$from);edges$to=as.character(edges$to)
for(l in 1:length(links)){
#show(l)
#currentAdditionalAttrs=as.numeric(as.character(links@data[l,e_attr_names]))
currentAdditionalAttrs=links@data[l,e_attr_names]
#show(currentAdditionalAttrs)
for(i in 1:length(links@lines[[l]]@Lines)){
coords = links@lines[[l]]@Lines[[i]]@coords
vids = c()
#mincoords=apply(stations@coords,1,function(r){l=links@lines[[l]]@Lines[[i]]@coords;return(min(apply(abs(l-matrix(data=rep(r,nrow(l)),ncol=2,byrow = TRUE)),1,function(r){sqrt(r[1]^2+r[2]^2)})))})
for(k in 1:nrow(coords)){
if(nrow(vertexes)>0){
statdist = apply(vertexes[,c("x","y")] - matrix(rep(coords[k,],nrow(vertexes)),ncol=2,byrow=TRUE),1,function(r){sqrt(r[1]^2+r[2]^2)})
}else{statdist=c(2*snap)}
if(statdist[statdist==min(statdist)]<snap){
vids=append(vids,vertexes$id[statdist==min(statdist)])
#show(paste0('existing : ',vids))
}else{
# else create new vertex
vids=append(vids,currentvid)
#show(paste0('new : ',vids))
vertexes=rbind(vertexes,c(id=currentvid,x=coords[k,1],y=coords[k,2],station=FALSE))
names(vertexes)<-c("id","x","y","station")
currentvid=currentvid+1
}
#show(vertexes)
}
# add edges
for(k in 2:nrow(coords)){
addedge=c(from=vids[k-1],
to=vids[k],
speed=speed,
length=sqrt((coords[k-1,1]-coords[k,1])^2+(coords[k-1,2]-coords[k,2])^2),
currentAdditionalAttrs
)
#show(addedge)
edges=rbind(edges,addedge)
}
}
}
edges
snap = 1e-6
edges = data.frame()
currentvid = ifelse(nrow(vertexes)>0,as.numeric(as.character(vertexes$id))[nrow(vertexes)] + 1,1)
edges$from=as.character(edges$from);edges$to=as.character(edges$to)
for(l in 1:length(links)){
#show(l)
#currentAdditionalAttrs=as.numeric(as.character(links@data[l,e_attr_names]))
currentAdditionalAttrs=links@data[l,e_attr_names]
#show(currentAdditionalAttrs)
for(i in 1:length(links@lines[[l]]@Lines)){
coords = links@lines[[l]]@Lines[[i]]@coords
vids = c()
#mincoords=apply(stations@coords,1,function(r){l=links@lines[[l]]@Lines[[i]]@coords;return(min(apply(abs(l-matrix(data=rep(r,nrow(l)),ncol=2,byrow = TRUE)),1,function(r){sqrt(r[1]^2+r[2]^2)})))})
for(k in 1:nrow(coords)){
if(nrow(vertexes)>0){
statdist = apply(vertexes[,c("x","y")] - matrix(rep(coords[k,],nrow(vertexes)),ncol=2,byrow=TRUE),1,function(r){sqrt(r[1]^2+r[2]^2)})
}else{statdist=c(2*snap)}
if(statdist[statdist==min(statdist)]<snap){
vids=append(vids,vertexes$id[statdist==min(statdist)])
#show(paste0('existing : ',vids))
}else{
# else create new vertex
vids=append(vids,currentvid)
#show(paste0('new : ',vids))
vertexes=rbind(vertexes,c(id=currentvid,x=coords[k,1],y=coords[k,2],station=FALSE))
names(vertexes)<-c("id","x","y","station")
currentvid=currentvid+1
}
#show(vertexes)
}
# add edges
for(k in 2:nrow(coords)){
addedge=c(from=vids[k-1],
to=vids[k],
speed=speed,
length=sqrt((coords[k-1,1]-coords[k,1])^2+(coords[k-1,2]-coords[k,2])^2),
currentAdditionalAttrs
)
#show(addedge)
edges=rbind(edges,addedge)
}
}
}
edges
help(simplify)
comblist=list(speed="mean",length="sum")
for(attrname in e_attr_names){comblist[[attrname]]="min"}
res = simplify(graph_from_data_frame(edges,directed=FALSE,vertices = vertexes),edge.attr.comb = comblist)
g = induced_subgraph(res,which(degree(res)>0))
if(is.null(stations_layer)){
V(g)$station = rep(TRUE,vcount(g))
}
g
g
res = simplify(graph_from_data_frame(edges,directed=FALSE,vertices = vertexes),edge.attr.comb = comblist)
res
vertexes
graph_from_data_frame(edges,directed=FALSE,vertices = vertexes)
comblist
#show(edges)
names(edges)<-c("from","to","speed","length",e_attr_names)
comblist=list(speed="mean",length="sum")
for(attrname in e_attr_names){comblist[[attrname]]="min"}
res = simplify(graph_from_data_frame(edges,directed=FALSE,vertices = vertexes),edge.attr.comb = comblist)
res
g = induced_subgraph(res,which(degree(res)>0))
if(is.null(stations_layer)){
V(g)$station = rep(TRUE,vcount(g))
}
g
# source: addTransportationLayer in CS_HOME/CityNetwork/Models/TransportationNetwork/NetworkAnalysis/network.R
source(paste0(Sys.getenv('CS_HOME'),"/CityNetwork/Models/TransportationNetwork/NetworkAnalysis/network.R"))
nw = addTransportationLayer(link_layer = roads$osm_lines, snap=1e-6)
nw
shortest_paths(nw,from = V(nw)[1])
install.packages('r5r')
citation()
help(facet_grid)
library(ggplot2)
help(facet_grid)
setwd(paste0(Sys.getenv('CS_HOME'),'/QuantitativeEpistemology/InnovationInformal/Models/InnovationInformal/openmole'))
library(dplyr)
library(readr)
library(ggplot2)
source(paste0(Sys.getenv('CS_HOME'),'/Organisation/Models/Utils/R/plots.R'))
params<-c("firmSizeScaling","crossOverProba","crossOverShare","mutationProba","mutationAmplitude",
"currentProductShare","interactionProba","distanceDecay")
indics<-c("bestFitness","averageFitness","fitnessDiff","fitnessEntropy","diversity","interactionIntensity")
library(dplyr,warn.conflicts = F)
setwd(paste0(Sys.getenv('CS_HOME'),'/QuantitativeEpistemology/InnovationInformal/Models/InnovationInformal/openmole'))
library(dplyr,warn.conflicts = F)
source(paste0(Sys.getenv('CS_HOME'),'/Organisation/Models/Utils/R/plots.R'))
params<-c("firmSizeScaling","crossOverProba","crossOverShare","mutationProba","mutationAmplitude",
"currentProductShare","interactionProba","distanceDecay")
indics<-c("bestFitness","averageFitness","fitnessDiff","fitnessEntropy","diversity","interactionIntensity")
# as of 14/03/2022 - 11:34: miss 1800 model runs / 52800
resprefix = '20220314_071017_EXPLORATION'
resdir = paste0(Sys.getenv('CS_HOME'),'/QuantitativeEpistemology/InnovationInformal/Results/',resprefix,'/');dir.create(resdir,recursive = T)
res <- read_csv(file=paste0('exploration/',resprefix,'.csv'))
res$interactionProba
res$interactionProba=as.character(res$interactionProba)
for(crossOverProba in unique(res$crossOverProba)){
for (indic in indics){
ggsave(
ggplot(res[res$crossOverProba==crossOverProba,],
aes_string(x = "distanceDecay", y=indic, color = "interactionProba", group="interactionProba" ))+
geom_point(pch='.')+geom_smooth()+facet_grid(crossOverShare~firmSizeScaling,scales = 'free')+stdtheme
,filename = paste0(resdir,indic,'-distanceDecay_color-interactionProba_facet-crossOverShare-firmSizeScaling_crossOverProba',crossOverProba,'.png'),width=30,height=20,units='cm'
)
}
}
indicnames=list(bestFitness=expression(b),
averageFitness=expression(bar(f)),
fitnessDiff=expression(Delta*f),
fitnessEntropy=expression(Epsilon[f]),
diversity=expression(d),
interactionIntensity="interactionIntensity")
for(crossOverProba in unique(res$crossOverProba)){
for (indic in indics){
ggsave(
ggplot(res[res$crossOverProba==crossOverProba,],
aes_string(x = "distanceDecay", y=indic, color = "interactionProba", group="interactionProba" ))+
geom_point(pch='.')+geom_smooth()+facet_grid(crossOverShare~firmSizeScaling,scales = 'free')+
scale_colour_discrete(name=expression(p[E]))+xlab(expression(d[E]))+ylab(indicnames[[indic]])+stdtheme
,filename = paste0(resdir,indic,'-distanceDecay_color-interactionProba_facet-crossOverShare-firmSizeScaling_crossOverProba',crossOverProba,'.png'),width=30,height=20,units='cm'
)
}
}
res <- read_csv(file=paste0('exploration/',resprefix,'.csv'))
res$interactionProba=as.character(res$interactionProba)
res$crossOverShare = paste0('s[C]*"="*',res$crossOverShare)
res$firmSizeScaling = paste0('alpha[S]*"="*',res$firmSizeScaling)
for(crossOverProba in unique(res$crossOverProba)){
for (indic in indics){
ggsave(
ggplot(res[res$crossOverProba==crossOverProba,],
aes_string(x = "distanceDecay", y=indic, color = "interactionProba", group="interactionProba" ))+
geom_point(pch='.')+geom_smooth()+facet_grid(crossOverShare~firmSizeScaling,scales = 'free')+
scale_colour_discrete(name=expression(p[E]))+xlab(expression(d[E]))+ylab(indicnames[[indic]])+stdtheme
,filename = paste0(resdir,indic,'-distanceDecay_color-interactionProba_facet-crossOverShare-firmSizeScaling_crossOverProba',crossOverProba,'.png'),width=30,height=20,units='cm'
)
}
}
for(crossOverProba in unique(res$crossOverProba)){
for (indic in indics){
ggsave(
ggplot(res[res$crossOverProba==crossOverProba,],
aes_string(x = "distanceDecay", y=indic, color = "interactionProba", group="interactionProba" ))+
geom_point(pch='.')+geom_smooth()+facet_grid(crossOverShare~firmSizeScaling,scales = 'free',labeller = label_parsed)+
scale_colour_discrete(name=expression(p[E]))+xlab(expression(d[E]))+ylab(indicnames[[indic]])+stdtheme
,filename = paste0(resdir,indic,'-distanceDecay_color-interactionProba_facet-crossOverShare-firmSizeScaling_crossOverProba',crossOverProba,'.png'),width=30,height=20,units='cm'
)
}
}
resprefix = '20220314_095225_OPTIMISATION';finalgen='10000'
resdir = paste0(Sys.getenv('CS_HOME'),'/QuantitativeEpistemology/InnovationInformal/Results/',resprefix,'/');dir.create(resdir)
res <- read_csv(file=paste0('optimisation/',resprefix,'/population',finalgen,'.csv'))
res = res[res$`evolution$samples`>=5,]
res$diversity = res$diversity...12
res$averageFitness = res$averageFitness...11
res$firmSizeScaling = res$firmSizeScaling...3
res$crossOverShare = res$crossOverShare...5
res$mutationProba = res$mutationProba...6
res$mutationAmplitude = res$mutationAmplitude...7
res$currentProductShare = res$currentProductShare...8
res$interactionProba = res$interactionProba...9
res$distanceDecay = res$distanceDecay...10
res$samples = res$`evolution$samples`
res = res[res$diversity< -0.15,]
paramnames <- list(firmSizeScaling=expression(alpha[S]),
crossOverProba=expression(p[C]),
crossOverShare=expression(s[C]),
mutationProba=expression(p[M]),
mutationAmplitude=expression(x[M]),
currentProductShare=expression(s[P]),
interactionProba=expression(p[E]),
distanceDecay=expression(d[E])
)
for(param in params){
g=ggplot(res,aes_string(x="diversity",y="averageFitness",color=param,size="samples"))
g+geom_point(alpha=0.6)+xlab("Diversity")+ylab("Utility")+
scale_size_continuous(name="Samples")+scale_colour_continuous(names=paramnames[[param]])+stdtheme
ggsave(filename = paste0(resdir,"paretoDiversity-Fitness_color",param,'.png'),width=25,height=20,units='cm')
}
for(param in params){
g=ggplot(res,aes_string(x="diversity",y="averageFitness",color=param,size="samples"))
g+geom_point(alpha=0.6)+xlab("Diversity")+ylab("Utility")+
scale_size_continuous(name="Samples")+scale_colour_continuous(name=paramnames[[param]])+stdtheme
ggsave(filename = paste0(resdir,"paretoDiversity-Fitness_color",param,'.png'),width=25,height=20,units='cm')
}
for(param in params){
g=ggplot(res,aes_string(x="diversity",y="averageFitness",color=param,size="samples"))
g+geom_point(alpha=0.6)+xlab("Diversity")+ylab("Utility")+
scale_size_continuous(name="Samples")+scale_colour_continuous(name=paramnames[[param]])+stdtheme
ggsave(filename = paste0(resdir,"paretoDiversity-Fitness_color",param,'.png'),width=23,height=20,units='cm')
}
ggplot(res,aes(x=interactionProba,y=diversity))+geom_point()
ggplot(res,aes(x=interactionProba,y=averageFitness))+geom_point()
ggplot(res,aes(x=interactionProba,y=averageFitness))+geom_point()+geom_smooth()
ggplot(res,aes(x=interactionProba,y=diversity))+geom_point()
ggplot(res,aes(x=interactionProba,y=diversity,size=samples))+geom_point()
ggplot(res,aes(x=interactionProba,y=diversity,size=samples))+geom_point()+geom_smooth()
ggplot(res,aes(x=interactionProba,y=diversity,size=samples))+geom_point()+geom_smooth(n=10)
ggplot(res,aes(x=interactionProba,y=diversity,size=samples))+geom_point()+geom_smooth(span=0.1)
ggplot(res,aes(x=interactionProba,y=diversity,size=samples))+geom_point()+geom_smooth(span=0.5)
names(res)
res$averageFitness...21
ggplot(res,aes(x=interactionProba,y=diversity,size=samples,colour=distanceDecay))+geom_point(alpha=0.5)#+geom_smooth(span=0.5)
ggplot(res,aes(x=interactionProba,y=averageFitness,size=samples,colour=distanceDecay))+geom_point()+geom_smooth()
ggplot(res,aes(x=interactionProba,y=averageFitness,size=samples,colour=distanceDecay))+geom_point(alpha=0.5)+geom_smooth()
ggplot(res,aes(x=firmSizeScaling,y=averageFitness,size=samples,colour=distanceDecay))+geom_point(alpha=0.5)+geom_smooth()
fres = res[res$diversity<-0.4&res$averageFitness<-400,]
fres = res[res$diversity<(-0.4)&res$averageFitness<(-400),]
fres
fres[,params]
res$crossOverProba...4
res <- read_csv(file=paste0('optimisation/',resprefix,'/population',finalgen,'.csv'))
res = res[res$`evolution$samples`>=5,]
res$diversity = res$diversity...12
res$averageFitness = res$averageFitness...11
res$firmSizeScaling = res$firmSizeScaling...3
res$crossOverShare = res$crossOverShare...5
res$mutationProba = res$mutationProba...6
res$mutationAmplitude = res$mutationAmplitude...7
res$currentProductShare = res$currentProductShare...8
res$interactionProba = res$interactionProba...9
res$distanceDecay = res$distanceDecay...10
res$crossOverProba = res$crossOverProba...4
res$samples = res$`evolution$samples`
res = res[res$diversity< -0.15,]
fres = res[res$diversity<(-0.4)&res$averageFitness<(-400),]
fres[,params]
summary(fres[,params])
colMeans(fres[,params])
sd
apply(fres[,params],2,sd)
